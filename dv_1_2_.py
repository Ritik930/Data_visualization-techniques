# -*- coding: utf-8 -*-
"""DV 1.2 .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LQoEWZMgVdwoAbCkEWM2ONh4VBqZTY_G
"""

# Import necessary libraries
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
import pandas as pd
import numpy as np

# Ensure Plotly renders inline in Google Colab
from google.colab import output
output.enable_custom_widget_manager()

# Step 2: Read the dataset from file into a DataFrame
def load_data():
    # Load the cancer dataset from the uploaded file
    file_path = '/content/survey lung cancer.csv'
    df = pd.read_csv(file_path)
    return df

# Load the dataset
df = load_data()
df.head()  # Display the first few rows of your dataset

# Step 3: Create a line chart using matplotlib
def line_chart(df):
    plt.figure(figsize=(10, 6))
    if 'AGE' in df.columns and 'LUNG_CANCER' in df.columns:
        lung_cancer_counts = df.groupby('AGE')['LUNG_CANCER'].value_counts().unstack()
        for status in lung_cancer_counts.columns:
            plt.plot(lung_cancer_counts.index, lung_cancer_counts[status], label=f'Lung Cancer ({status})')
        plt.title('Line Chart: Age vs Lung Cancer Occurrence')
        plt.xlabel('Age')
        plt.ylabel('Count')
        plt.legend()
        plt.grid(True)
        plt.show()
    else:
        print("The dataset does not contain the necessary columns for the line chart.")

# Call the function
line_chart(df)

# Step 4: Generate a scatter plot using seaborn
def scatter_plot(df):
    plt.figure(figsize=(10, 6))
    if 'AGE' in df.columns and 'SMOKING' in df.columns:
        sns.scatterplot(data=df, x='AGE', y='SMOKING', hue='LUNG_CANCER', palette='viridis')
        plt.title('Scatter Plot: Age vs Smoking (Lung Cancer Status)')
        plt.xlabel('Age')
        plt.ylabel('Smoking Level')
        plt.show()
    else:
        print("The dataset does not contain the necessary columns for the scatter plot.")

# Call the function
scatter_plot(df)

# Step 5: Create a heatmap using seaborn
def heatmap(df):
    # Compute correlation matrix for numerical columns
    numeric_cols = df.select_dtypes(include=['float64', 'int64'])
    if not numeric_cols.empty:
        corr_matrix = numeric_cols.corr()
        plt.figure(figsize=(8, 6))
        sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
        plt.title('Heatmap: Correlation Matrix')
        plt.show()
    else:
        print("The dataset does not contain numeric columns for the heatmap.")

# Call the function
heatmap(df)

# Step 6: Generate a 3D plot using plotly
def plot_3d(df):
    if {'AGE', 'SMOKING', 'LUNG_CANCER'}.issubset(df.columns):
        fig = go.Figure()
        fig.add_trace(go.Scatter3d(
            x=df['AGE'],
            y=df['SMOKING'],
            z=df['LUNG_CANCER'].apply(lambda x: 1 if x == 'YES' else 0),
            mode='markers',
            marker=dict(
                size=5,
                color=df['AGE'],  # Color based on age
                colorscale='Viridis',
                opacity=0.8
            )
        ))
        fig.update_layout(
            title='3D Scatter Plot: Age, Smoking, and Lung Cancer',
            scene=dict(
                xaxis_title='Age',
                yaxis_title='Smoking',
                zaxis_title='Lung Cancer (0=No, 1=Yes)'
            )
        )
        fig.show()
    else:
        print("The dataset does not contain the necessary columns for the 3D plot.")

# Call the function
plot_3d(df)

# Step 7-10: Run all visualizations
line_chart(df)
scatter_plot(df)
heatmap(df)
plot_3d(df)